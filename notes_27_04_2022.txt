
Q Create the table named as employeedetails with the following attributes/fields

id (length 5)====> alphanumeric Primary key
firstname =====> not null
middlename
lastname =====> not null
designation (Mgr,Asstmgr,programmer)
department  (Sales,HR,Mkt,Devlopment)
doj default current date
basic should be more than 2000

A CREATE TABLE employeedetails(
id VARCHAR2(5) CONSTRAINT employeedetails_id_pk PRIMARY KEY,
firstname VARCHAR2(20) CONSTRAINT employeedetails_fn_not_null NOT NULL,
middlename VARCHAR2(20),
lastname VARCHAR2(20) CONSTRAINT employeedetails_ln_not_null NOT NULL,
designation VARCHAR2(25) CONSTRAINT employeedetails_desig_check CHECK (designation IN('Mgr','Asstmgr','programmer')),
department VARCHAR2(25) CONSTRAINT employeedetails_dept_check CHECK (department IN('Sales','HR','Mkt','Development')),
doj DATE DEFAULT sysdate,
basic INTEGER CONSTRAINT employeedetails_basic_check CHECK ( basic > 2000)
);

Q Insert the first record with all the columns with value.

A INSERT INTO employeedetails VALUES('E0001','Akash','Kumar','Sharma','Mgr','Sales','12-feb-2010',10000);
OR
INSERT INTO employeedetails(id,firstname.middlename,lastname,designation,department,doj,basic) VALUES('E0001','Akash','Kumar','Sharma','Mgr','Sales','12-feb-2010',10000);


Q Insert the second record with middlename as null.
 INSERT INTO employeedetails VALUES('E0002','Ravi',null,'Chandran','Mgr','Mkt','16-Oct-2000',15000);
OR
INSERT INTO employeedetails(id,firstname.middlename,lastname,designation,department,doj,basic) VALUES('E0002','Ravi','Chandran','Mgr','Mkt','16-Oct-2000',15000);

Q Display id,firstname,basic for employee E0001.

SELECT id,firstname,basic FOR employeedetails WHERE id='E0001';

Q Display the lastname,firstname,doj.
select lastname, firstname,doj from employeedetails;


Q Display the lastname and firstname for employee E0001 and E0002

select lastname, firstname from employeedetails where id='E0001' OR id='E0002';
OR
select lastname,firstname from employeedetails where id in('E0001','E0002');


Q Display lastname for the employee who is manager in sales department.

SELECT lastname for employeedetails where designation = 'Mgr' and department ='sales';

Q display firstname and lastname for the employee whose middlename is null.
select firstname,lastname from employeedetails where middlename is null;

Q Display doj for the records WHERE middlename is not null.
select firstname,lastname from employeedetails where middlename IS NOT null;



Q Display firstname and lastname for employees other than E0001 and E0002.

select lastname,firstname from employeedetails where id not in('E0001','E0002');

Q Display the firstname and basic where basic ranges within 12000 to 30000 
( inclusive 12000 and 30000)

select firstname,basic from employeedetails where basic is between 12000 and 30000;
OR
select firstname,basic from employeedetails where basic >= 12000 and basic<=30000;


Q Display the initial of the firstname and entire lastname for all employees
  Convert the initial as uppercase and display.

firstname lastname
Ajith     Sharma
Sujit     Kumar
  Sharma,A
  Kumar,S

 SELECT CONCAT(lastname,CONCAT(',',upper(substr(firstname,1,1)))) FROM employeedetails

--------------------------------------------------------------------------------------------------------------------------
Q Display the count of employees. 
ASELECT count(id) count_of_employee FROM employee
Q Display the sum of salary of all the employees in the employee table.
A SELECT sum(salary) total_of_basic FROM employee
Q Display the average salary paid to the employees.
A SELECT avg(salary) FROM employee
Q dipslay the maximum salary paid to the employees.
A SELECT max(salary) FROM employee
Q display the minimum salary paid to the employees.
A SELECT min(salary) FROM employee
Q display min and max salary paid to the employees.
SELECT min(salary),max(salary) FROM employee;
---------------------------------------------------------------------------------------------------------------------------------
/* The below SQL statement will sum up all the basics from all the rows and display */


select sum(salary) 
from employee

/* The below SQL statement will first group the departments and then calculate the sum of salary departmentwise and display
salary totals */
select sum(salary)
from employee
group by dept


/* The below SQL statement will first group the departments and then calculate the sum of salary departmentwise and display
salary totals alongwith the name of the departments */
select dept,sum(salary)
from employee
group by dept;

/* The below SQL statement is returning unique value for the designations */
SELECT dept
FROM employee
GROUP BY dept;

SELECT DISTINCT dept
FROM employee;

* Aggregate functions can be used without group by clause.
* Aggregate functions are used mostly with group by clause.
---------------------------------------------------------------------------------------------------------
HAVING clause is used to give condition after grouping the data and with having we use aggregate
functions ( sum,avg,max,min,count)
Display the count of employees departmentwise where the count of employees are more than 10.
  SELECT department,count(id)
  FROM employeedetails
  GROUP BY department
  HAVING count(id)>10
 department       count(id)
  Mkt              15
  Development      20
Display departmentwise average of basic
  SELECT department,avg(basic)
  FROM employeedetails
  GROUP BY department
What is the difference between WHERE and HAVING as both seems to be used for filtering or 
restricting the rows?
A Where clause is applied while giving condition to each of the records and accordingly
 display the records whereas having is used to give condition or restriction after
 grouping the data.  
 We use where with the requirements like
 Display the records of all the managers.
 Display the records where the basic is more than 12000.
 Display the records where middlename is null.
 Display the records who joined the company in the year 2010.
 Display the records who joined the company between 2010 and 2020.
 Display the record who joined the company not betwwn 2010 and 2020.
 We use having with the requirements like
 Display the departmentwise count of employees where the count is more than 5.
 Display the departmentwise average of basic pay where the average is more than 20000.
Q Can we use where and haing in a single SQL statement?
A Yes
 Display the designationwise count for the employees from sales department  and display for 
 the designation where the count is more than 10.

 SELECT designation,count(id)
 FROM employeedetails
 WHERE department='Sales'
 GROUP BY designation
 HAVING count(id)>10;
 
* GROUP BY clause should contain all non-aggregate columns that are present in SELECT clause
  Example
    SELECT designation,count(id)
    FROM employeedetails
    GROUP BY designation

  In the above select statement designation is the non aggregate column and id is the aggregate
  column as we are applying aggregate function on the id.
   

   If we write the SQL statement as follows, it will be incorrect as name is not present with the
   group by clause
   SELECT designation,name,count(id)
   FROM employeedetails
   GROUP BY designation

  So the correct way of writing should be
    SELECT designation,name,count(id)
   FROM employeedetails
   GROUP BY designation,name

  /* If we dont mention a non aggregate column in the select but it can be used in group by clause */
        2   
        3
        4
   SELECT count(id)
   FROM employeedetails
   GROUP BY designation
-----------------------------------------------------------------------------------------------------
* GROUP BY clause should be mandatory when there is a list of aggregate and non-aggregate columns in SELECT statement
The following statement will be incorrect:
SELECT designation,count(id)
    FROM employeedetails
------------------------------------------------------------------------------------------------------
Whenever nested aggregate columns appear in the SELECT clause, GROUP BY clause should be mandatorily used.
The below statement is incorrect
SELECT MAX(AVG(basic)) 
FROM employeedetails

Depatmentwise average basic
  SELECT department,AVG(basic)
  FROM employeedetails
  GROUP BY department

  sales 120000
  mkt   230000
  hr    500000

Display the maximum average of basic pay departmentwise

   SELECT MAX(AVG(basic))
   FROM employeedetails
   GROUP BY department
------------------------------------------------------------------------------------------------- 
 * HAVING cannot be written without the GROUP BY clause in the query.

    SELECT department,count(id)
    FROM employeedetails
    GROUP BY department
    HAVING count(id)>5
    
  WE cannot write
SELECT department,count(id)
    FROM employeedetails
    HAVING count(id)>5
------------------------------------------------------------------------------------------------
   * Aggregate column condition(s) should always be written along with the HAVING clause and not with the WHERE clause

The following statement will be incorrect 
    SELECT department,count(id)
    FROM employeedetails
    WHERE count(id)>5
    GROUP BY department
-----------------------------------------------------------------------------------------------------
* Columns from the list of the SELECT clause should not be skipped in the GROUP BY clause. However, you can add an extra non-aggregate column which is not present in the SELECT to the GROUP BY clause

   SELECT MAX(AVG(basic))
   FROM employeedetails
   GROUP BY department

    500000
-------------------------------------------------------------------------------------------------
* GROUP BY clause should not contain any aggregate columns
The following statement will go wrong
 SELECT department,count(id)
    FROM employeedetails
    GROUP BY id
-------------------------------------------------------------------------
Aliased name given for the column should not be used in GROUP BY clause

The following SQL is incorrect:

 SELECT department dept,count(id)
    FROM employeedetails
    GROUP BY dept
---------------------------------------------------------------------
HAVING clause should not contain non-aggregate columns which are not present in the GROUP BY clause

The following statement will go incorrect
 SELECT department,count(id)
    FROM employeedetails
    GROUP BY department
    HAVING count(name)>5
--------------------------------------------------------------------------------------------
select to_char(sldate,'Month') MONTH, count(*) NUMBER_SALE from sale group by to_char(sldate,'Month') order by  2 desc
-------------------------------------------------------------------------------------------------------------------------------
SELECT id,ename,compid,model
FROM employee INNER JOIN computer
ON employee.compid=computer.compid 

ORA-00918: column ambiguously defined
[ compid is in both the tables. So when we mentioned compid in the 
select statement , database engine is unable to interpret that
from which table we want to see the compid ]
-----------------------------------------------------------------


SELECT id,ename,computer.compid,model
FROM employee INNER JOIN computer
ON employee.compid=computer.compid 

--------------------------------------------------------------
SELECT id,ename,c.compid,model
FROM employee e INNER JOIN computer c
ON e.compid=c.compid 
OR
SELECT id,ename,e.compid,model
FROM employee e INNER JOIN computer c
ON e.compid=c.compid 
OR
SELECT id,ename,e.compid,model
FROM employee e JOIN computer c
ON e.compid=c.compid 
--------------------------------------------------
    employee
id    ename     compid    
1     Ravi      C0001
2     Ashok     C0002
3     Suresh    null

computer 
compid     name
C0001      HP
C0002      DELL


SELECT id,ename,emp.compid,name
FROM employee emp LEFT OUTER JOIN computer comp
ON emp.compid=comp.compid
1   Ravi   C0001  HP
2   Ashok  C0002  DELL
3   Suresh null   null
----------------------------------------------------------------------------------------------------------------------------
Create table patient(
patientid varchar2(5) primary key check(patientid like 'P%'),
pname varchar2(15) not null,
city varchar2(15)
);
Insert into patient values('P101','Kevin','New York');
Insert into patient values('P102','Merlin','Boston');
Insert into patient values('P103','Eliza','Chicago');
Insert into patient values('P104','Robert','New York');
Insert into patient values('P105','David','Chicago');

Create table doctor (
doctorid varchar2(5) primary key check(doctorid like 'D%'),
dname  VARCHAR2(20),
dept  VARCHAR2(20),
salary NUMBER);

Insert into doctor values ('D201','Jane', 'Cardiology', 150000);
Insert into doctor values ('D202','Maria', 'Nephrology', 110000);
Insert into doctor values ('D203','John', 'Cardiology', 160000);
Insert into doctor values ('D204','Jack', 'Neurology', 125000);


Create table consultation(
consultationid number primary key,
patientid varchar2(5) references patient(patientid),
doctorid varchar2(5) references doctor(doctorid),
fee number
);


Insert into consultation values(501,'P101','D204',500);
Insert into consultation values(502,'P102','D201',600);
Insert into consultation values(503,'P103','D202',450);
Insert into consultation values(504,'P104','D203',550);
Insert into consultation values(505,'P105','D203',550);
Insert into consultation values(506,'P101','D202',450);

------------------------------------------------------------------------------------------------------------------------
Q Display patientid and patientname.

Q Display patientid patientname and city

Q Display patientid and patientname who are from the city Boston. 

Q Display patientid,patientname,city for patients who are either from New York or from Boston.



Q Display patientid,patiendname who are not from new york or boston


Q Display the city and number of patients from that city . Counting of patient column should have the alias name as
  patient_count.

Q  Display the number of patients.

Q Display the number of patients who from boston or new york.

  
Q Display the number of patients citywise but display the patients who are from boston and new york only.



Q display the patientid and patientname whose name is having e. 


Q count the number of patients whose name is having e.

Q count the number of patients whose name is not having e.

 
Q display the city and the count of patients from that city where the count is more than 1.

Q Count the number of cardiologist.

Q Count the number of doctors excluding cardiologist. 


Q Display patientid, patientname and consultation fee.



Q display patientid and total consultation fee given by the patient

   P0001       400
   P0002       200
   P0001       200
   P0002       100

Q display patientid and total consultation fee where the total consultation fee is more than 2000.

Q display patientid and total consultation fee in descending order of the total consultation fee.

Q display patientid,pname,doctorid,dname. 


Q display doctorid  and number of patients doctor has treated.

Q display doctorid and number of patients in the order of least patients treated to most patients treated.

Q display doctor's name and the number of patients treated.

  
Q display doctor's name and the number of patients treated.Doctors name should be displayed in the order of most patient treated
  to least patient treated

Q display the doctor's name who had treated the patients of New York.
 

Q Display the names of the patients who were treated by the cardiologist.
 